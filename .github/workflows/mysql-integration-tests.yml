name: Iceberg Integration Tests

on:
  push:
    branches:
      - "feat/testing_framework"
  pull_request:
    branches:
      - "feat/testing_framework"

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Create Docker network
        run: docker network create iceberg_net

      - name: Start MinIO
        run: |
          docker run -d \
            --name minio \
            --network iceberg_net \
            --network-alias warehouse.minio \
            -e MINIO_ROOT_USER=admin \
            -e MINIO_ROOT_PASSWORD=password \
            -e MINIO_DOMAIN=minio \
            -p 9000:9000 \
            -p 9001:9001 \
            minio/minio server /data --console-address ":9001"

      - name: Initialize MinIO bucket
        run: |
          docker run --rm \
            --network iceberg_net \
            -e AWS_ACCESS_KEY_ID=admin \
            -e AWS_SECRET_ACCESS_KEY=password \
            -e AWS_REGION=us-east-1 \
            minio/mc /bin/sh -c "
              mc config host add minio http://minio:9000 admin password;
              mc mb minio/warehouse || true;
              mc policy set public minio/warehouse;
            "

      - name: Start Postgres
        run: |
          docker run -d \
            --name postgres \
            --network iceberg_net \
            -e POSTGRES_USER=iceberg \
            -e POSTGRES_PASSWORD=password \
            -e POSTGRES_DB=iceberg \
            -p 5432:5432 \
            postgres:15

      - name: Wait for Postgres to be ready
        run: |
          for i in {1..30}; do
            if docker exec postgres pg_isready -U iceberg -d iceberg; then
              echo "Postgres is ready!"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "Timed out waiting for Postgres"
              docker logs postgres
              exit 1
            fi
            echo "Waiting for Postgres to be ready... ($i/30)"
            sleep 3
          done

      - name: Create spark-defaults.conf
        run: |
          cat > spark-defaults.conf << EOL
          spark.jars.packages                                  org.apache.iceberg:iceberg-spark-runtime-3.5_2.12:1.8.1,org.postgresql:postgresql:42.5.4,org.apache.hadoop:hadoop-aws:3.3.4,com.amazonaws:aws-java-sdk-bundle:1.12.262,org.apache.spark:spark-connect_2.12:3.5.2
          spark.sql.extensions                                 org.apache.iceberg.spark.extensions.IcebergSparkSessionExtensions
          spark.sql.catalog.spark_catalog                      org.apache.iceberg.spark.SparkSessionCatalog
          spark.sql.catalog.spark_catalog.type                 hive

          # S3 Configuration for MinIO
          spark.hadoop.fs.s3a.endpoint                           http://minio:9000
          spark.hadoop.fs.s3a.access.key                         admin
          spark.hadoop.fs.s3a.secret.key                         password
          spark.hadoop.fs.s3a.path.style.access                  true
          spark.hadoop.fs.s3a.impl                               org.apache.hadoop.fs.s3a.S3AFileSystem
          spark.hadoop.fs.s3a.connection.ssl.enabled             false

          # Configure olake_iceberg catalog
          spark.sql.catalog.olake_iceberg                      org.apache.iceberg.spark.SparkCatalog
          spark.sql.catalog.olake_iceberg.catalog-impl         org.apache.iceberg.jdbc.JdbcCatalog
          spark.sql.catalog.olake_iceberg.uri                  jdbc:postgresql://postgres:5432/iceberg?ssl=false
          spark.sql.catalog.olake_iceberg.jdbc.user            iceberg
          spark.sql.catalog.olake_iceberg.jdbc.password        password
          spark.sql.catalog.olake_iceberg.warehouse            s3a://warehouse/olake_iceberg/
          spark.sql.catalog.olake_iceberg.jdbc.driver          org.postgresql.Driver
          spark.sql.catalog.olake_iceberg.jdbc.schema-version  V1

          # Set default catalog
          spark.sql.defaultCatalog                             olake_iceberg
          EOL

      - name: Start Spark Iceberg container
        run: |
          docker run -d \
            --name spark-iceberg \
            --network iceberg_net \
            -e AWS_ACCESS_KEY_ID=admin \
            -e AWS_SECRET_ACCESS_KEY=password \
            -e AWS_REGION=us-east-1 \
            -p 8888:8888 \
            -p 8088:8080 \
            -p 10000:10000 \
            -p 10001:10001 \
            -p 15002:15002 \
            -v $(pwd)/spark-defaults.conf:/opt/spark/conf/spark-defaults.conf \
            tabulario/spark-iceberg:latest

      - name: Start Spark Connect server
        run: |
          docker exec spark-iceberg sh -c "/opt/spark/sbin/start-connect-server.sh --packages org.apache.spark:spark-connect_2.12:3.5.2,org.apache.hadoop:hadoop-aws:3.3.4,com.amazonaws:aws-java-sdk-bundle:1.12.262 --conf spark.hadoop.fs.s3a.impl=org.apache.hadoop.fs.s3a.S3AFileSystem"

      - name: Wait for Spark Connect to be ready
        run: |
          for i in {1..30}; do
            if docker logs spark-iceberg | grep -q "Starting Spark Connect server"; then
              echo "Spark Connect is starting!"
              sleep 10  # Give it some extra time to fully initialize
              break
            fi
            if [ $i -eq 30 ]; then
              echo "Timed out waiting for Spark Connect"
              docker logs spark-iceberg
              exit 1
            fi
            echo "Waiting for Spark Connect to start... ($i/30)"
            sleep 3
          done

      - name: Install dependencies
        run: go mod download

      - name: Build
        run: go build -v ./...

      - name: Run integration tests
        run: go test -v ./... -tags=integration --timeout 10m
        